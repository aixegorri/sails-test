




/*------------------------------------*\
    $MIXINS
\*------------------------------------*/



// Mediqueries y breakpoints: El mixin consta de 4 partes
//
//  $breakpoint: Es el Brakpoint o la variable de breakpoint, las definimos en _variables.scss
//               las que vienen por defecto: $bp1, $bp2, $bp3, $bp4 y $bp5.
//
//  $query1: max o min, dependiendo de como queremos el Mediaquery que funcione:
//           max-width, min-width, min-device-width, etc... - 'min' por defecto -
//
//  $query2: La segunda parte del query, lo que va después de 'min' o 'max'.
//           -device-width, -device-height, -width etc...  - 'width' por defecto -
//
//  $target: El medio. PUede ser 'all', 'screen', 'print', etc...
//           - '' por defecto -
//  USO:
//
//  **************************************************************************
//
//  $bp1 : 45em;
//
// .texto {
// 	color:red;
// 	@include media-query-bp($bp1,min,width,screen) {
// 		color: blue;
// 	}
// }
//
//  **************************************************************************
//
// Compilaría:
//
//  **************************************************************************
// .texto {
// color: red; }
// @media screen and (min-width: 45em) {
//   .texto {
//     color: blue; } }
//
//
@mixin media-query-bp($breakpoint, $query1: min, $query2: width, $target: "") {
	$mqtarget: "";
	// Check if media queries are supported
	@if $media-queries-supported == true {
		@if $target != "" {
			@media #{$target} and (#{$query1}-#{$query2}: #{$breakpoint}) {
				@content;
			}
		}
		@else {
			@media (#{$query1}-#{$query2}: #{$breakpoint}) {
				@content;
			}
		}
	}
	@else {
		#{$no-mq-classname} & {
			@content;
		}
	}
}


@mixin font-size($font-size: 16){
    font-size:($font-size)*1px;
    font-size:($font-size / $basefontsize)*1rem;
}

// .wrapper
@mixin wrapper($width:90%, $max-width:none){
	width: $width;
	max-width: $max-width;
	margin-left: auto;
	margin-right: auto;
}

/* Flexbox Space Between Last Row Align Left by Diana Aceves 
 * https://codepen.io/diana_aceves/pen/KVGNZg?editors=1100
 */
@mixin last-row-flexbox($num-columns, $width-items) {

   // Vamos a calcular el espacio que queda entre los elementos para usarlo de márgen en los sueltos.
   $filled-space: $width-items * $num-columns;
   $margin: calc((100% - #{$filled-space}) / (#{$num-columns} - 1));

   $num-cols-1: $num-columns - 1; 

   // Establezco el ancho
   width: $width-items; 

   // Damos el margen izquierdo a todos los elementos sueltos menos al primero.
   &:nth-child(#{$num-columns}n+1):nth-last-child(-n+#{$num-cols-1}) ~ & {
      margin-left: $margin;
   }

   // Mediante el bucle, generamos todas las posibles posiciones del last-child para darle margin-right auto.
   @for $i from 1 through $num-columns - 2 {
      $index: $num-columns - $i;
      &:nth-child(#{$num-columns}n+#{$index}):last-child {
         margin-right: auto;
      }
   } 

   // Linter
   // &:nth-child(#{$num-columns}n+1):nth-last-child(-n+#{$num-cols-1}),
   // &:nth-child(#{$num-columns}n+1):nth-last-child(-n+#{$num-cols-1}) ~ & {
   //    background: deepskyblue;
   // }
}

// flexbox, because fuck you, that's why.
@mixin flex($wrap, $justify) {
	display: flex;
	flex-wrap: $wrap;
	justify-content: $justify;
}

// $include flex-start(VALUE) (flex-start | flex-end | center | space-between | space-around)
@mixin content-justify($justify) {
	content-justify : $justify;
}

// $include flex-direction(VALUE) (row | row-reverse | column | column-reverse)
@mixin flex-direction($direction) {
	flex-direction : $direction;
}



// gradients
@mixin horizontal($startColor : $white, $endColor : $lightergrey) {
	background-color: $endColor;
	background-image  : linear-gradient(left, $startColor, $endColor);
	background-repeat : repeat-x;
}

@mixin vertical($startColor : $white, $endColor:  $lightergrey) {
	background-image  : linear-gradient(top, $startColor, $endColor);
	background-repeat : repeat-x;
}

@mixin directional($startColor : $white, $endColor : $lightergrey, $deg : 45deg) {
	background-color  : $endColor;
	background-image  : linear-gradient($deg, $startColor, $endColor);
	background-repeat : repeat-x;
}

// .bordered(COLOR, COLOR, COLOR, COLOR);
@mixin bordered($top-color: #eee, $right-color: #eee, $bottom-color: #eee, $left-color: #eee) {
	border-top : solid 1px $top-color;
	border-left : solid 1px $left-color;
	border-right : solid 1px $right-color;
	border-bottom : solid 1px $bottom-color;
}

// .border-radius(VALUE,VALUE,VALUE,VALUE);
@mixin border-radius($topright: 0, $bottomright: 0, $bottomleft: 0, $topleft: 0) {
	border-top-right-radius : $topright;
	border-bottom-right-radius : $bottomright;
	border-bottom-left-radius : $bottomleft;
	border-top-left-radius : $topleft;
	background-clip : padding-box;
}

// .box-shadow(HORIZONTAL VERTICAL BLUR COLOR))
@mixin box-shadow($shadow: 0 1px 3px rgba(0,0,0,.25)) {
	box-shadow : $shadow;
}

// .drop-shadow(HORIZONTAL, VERTICAL, BLUR, ALPHA);
@mixin drop-shadow($x-axis: 0, $y-axis: 1px, $blur: 2px, $alpha: 0.1) {
	box-shadow : $x-axis $y-axis $blur rgba(0, 0, 0, $alpha);
}

// .opacity(VALUE);
@mixin opacity($opacity : .5) {
	opacity : $opacity;
}

// .rotate(VALUEdeg);
@mixin rotate($deg) {
	transform : rotate($deg);
}

// .scale(VALUE);
@mixin scale($ratio) {
	transform : scale($ratio);
}

// .skew(VALUE, VALUE);
@mixin skew($x: 0, $y: 0) {
	transform : skew($x, $y);
}

// .transition(PROPERTY DURATION DELAY(OPTIONAL) TIMING-FINCTION);
@mixin transition($transition) {
	transition : $transition;
}

// .translate(VALUE, VALUE)
@mixin translate($x: 0, $y: 0) {
	transform : translate($x, $y);
}

@mixin translate3d($x: 0, $y: 0, $z: 0) {
	transform : translate($x, $y, $z);
}


// .background-alpha(VALUE VALUE);
@mixin background-alpha($color: $white, $alpha: 1) {
	background-color : hsla(hue($color), saturation($color), lightness($color), $alpha);
}

// .background-size(VALUE VALUE);
@mixin background-size($size){
	background-size : $size;
}

// .background-clip(VALUE); (border-box, padding-box, content-box)
@mixin background-clip($clip) {
	background-clip : $clip;
}

// .box-sizing(VALUE); (border-box, padding-box, content-box)
@mixin box-sizing($boxsize: border-box) {
	box-sizing : $boxsize;
}


// .resize(VALUE) (none, both, horizontal, vertical, inherit)

@mixin resize($direction: both) {
	resize : $direction;
	overflow : auto;
}

// .userselect(VALUE) (all, element, none, text)

@mixin user-select($select) {
	user-select : $select;
}





// .columns(250px, 0, 24px, COLOR, solid, 1px)

@mixin columns($colwidth: 250px, $colcount: 0, $colgap: 50px, $columnRuleColor: #eee, $columnRuleStyle: solid, $columnRuleWidth: 1px) {
	column-width : $colwidth;
	column-count : $colcount;
	column-gap : $colgap;
	column-rule-color : $columnRuleColor;
	column-rule-style : $columnRuleStyle;
	column-rule-width : $columnRuleWidth;
}





//
//Creamos prefijos para todo dios
//
//   `@include vendor(border-radius, 4px);`
//
//
@mixin vendor($property, $value...){
    -webkit-#{$property}:$value;
       -moz-#{$property}:$value;
        -ms-#{$property}:$value;
         -o-#{$property}:$value;
            #{$property}:$value;
}
